import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder
from sklearn.compose import ColumnTransformer
from sklearn.decomposition import PCA
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import faiss
import os
import math
import warnings

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
warnings.filterwarnings("ignore")
os.environ["CUDA_VISIBLE_DEVICES"] = ""  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ CPU

st.set_page_config(page_title="FAISS –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", layout="wide")

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title("üî¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (FAISS + Decision Tree)")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª", type=["xlsx", "csv"])

if uploaded_file:
    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ ---
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
    st.write(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {df.shape}")

    # --- –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")

        # --- –û–ø—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫ ---
        use_all_rows = st.checkbox("üìã –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏", value=True)

        if not use_all_rows:
            max_rows = st.number_input(
                "–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                min_value=10,
                max_value=len(df),
                value=min(1000, len(df)),
                step=10
            )
            df = df.head(max_rows)
        else:
            max_rows = len(df)

        # --- –û–ø—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ ---
        use_all_columns = st.checkbox("üß© –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã", value=True)

        if not use_all_columns:
            max_features = st.number_input(
                "–ú–∞–∫—Å–∏–º—É–º —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                min_value=1,
                max_value=len(df.columns),
                value=min(20, len(df.columns)),
                step=1
            )

            selected_cols = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                df.columns.tolist(),
                default=df.columns[:max_features].tolist()
            )
        else:
            selected_cols = df.columns.tolist()

        # --- –í—ã–±–æ—Ä —Ç–∞—Ä–≥–µ—Ç–∞ ---
        target_col = st.selectbox(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–≥–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            options=["<–Ω–µ—Ç>"] + df.columns.tolist(),
            index=0
        )
        if target_col == "<–Ω–µ—Ç>":
            target_col = None

        # --- –§–ª–∞–≥–∏ –≤–∫–ª—é—á–µ–Ω–∏—è EDA –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ---
        show_eda = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å EDA (–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö)", value=True)
        show_corr = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É", value=True)

        # --- –§–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ ---
        remove_outliers = st.checkbox("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã", value=False)

    # --- –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    df = df[selected_cols].dropna()
    st.write(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤: {df.shape}")

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---
    df_num_col = df.select_dtypes(include=[np.number]).columns.tolist()
    df_cat_col = df.select_dtypes(exclude=[np.number]).columns.tolist()

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ) ---
    if remove_outliers and df_num_col:
        st.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤.")
        before = df.shape[0]
        for col in df_num_col:
            q1 = df[col].quantile(0.25)
            q3 = df[col].quantile(0.75)
            iqr = q3 - q1
            lower, upper = q1 - 1.5 * iqr, q3 + 1.5 * iqr
            df = df[(df[col] >= lower) & (df[col] <= upper)]
        after = df.shape[0]
        st.write(f"–£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {before - after} —Å—Ç—Ä–æ–∫ ({round((before - after) / before * 100, 2)}%)")
        st.write(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤: {df.shape}")

    if target_col:
        st.success(f"üéØ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–≥–µ—Ç: {target_col}")
    else:
        st.info("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ —Ç–∞—Ä–≥–µ—Ç–∞.")

    # --- EDA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω) ---
    if show_eda:
        st.header("üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if df_num_col:
            n_cols = 2
            n_rows = len(df_num_col)
            fig, axes = plt.subplots(nrows=n_rows, ncols=n_cols, figsize=(12, 4 * n_rows))
            axes = axes.reshape(-1, 2)
            for i, col in enumerate(df_num_col):
                sns.histplot(df[col], bins=30, kde=True, ax=axes[i][0], color='skyblue')
                axes[i][0].set_title(f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {col}')
                sns.boxplot(x=df[col], ax=axes[i][1], color='lightcoral')
                axes[i][1].set_title(f'Boxplot: {col}')
            plt.tight_layout()
            st.pyplot(fig)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if df_cat_col:
            top_n = 5
            n_cols = 3
            n_rows = math.ceil(len(df_cat_col) / n_cols)
            fig, axes = plt.subplots(n_rows, n_cols, figsize=(6 * n_cols, 5 * n_rows))
            axes = axes.flatten()
            for i, col in enumerate(df_cat_col):
                top_cats = df[col].value_counts().nlargest(top_n).index
                df_plot = df.copy()
                df_plot[col] = df_plot[col].apply(lambda x: x if x in top_cats else 'Other')
                count_data = df_plot[col].value_counts()
                percent_data = df_plot[col].value_counts(normalize=True) * 100
                sns.barplot(x=count_data.index, y=count_data.values, ax=axes[i],
                            palette=sns.color_palette("coolwarm", n_colors=len(count_data)))
                axes[i].set_title(f'Top {top_n} –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {col}')
                axes[i].tick_params(axis='x', rotation=45)
                for j, val in enumerate(count_data.values):
                    axes[i].text(j, val + val * 0.01, f'{percent_data.values[j]:.1f}%', ha='center')
            for j in range(len(df_cat_col), len(axes)):
                fig.delaxes(axes[j])
            plt.tight_layout()
            st.pyplot(fig)

    # --- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω) ---
    if show_corr and df_num_col:
        st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
        corr = df[df_num_col].corr()
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", ax=ax)
        st.pyplot(fig)

    # --- –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
    cat_encoders = []
    for col in df_cat_col:
        if df[col].nunique() < 20:
            cat_encoders.append((col, OneHotEncoder(handle_unknown='ignore'), [col]))
        else:
            cat_encoders.append((col, OrdinalEncoder(), [col]))

    preprocessor = ColumnTransformer(
        transformers=[('num', StandardScaler(), df_num_col)] + cat_encoders,
        remainder='drop'
    )

    X = preprocessor.fit_transform(df)
    X = X.toarray() if hasattr(X, 'toarray') else X

    # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —á–∏—Å–ª–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ ---
    st.header("ü§ñ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")

    def optimal_kmeans_clusters(X, max_k=10):
        best_k, best_score = 2, -1
        for k in range(2, min(max_k, X.shape[0]-1)):
            kmeans = KMeans(n_clusters=k, random_state=42)
            labels = kmeans.fit_predict(X)
            score = silhouette_score(X, labels)
            if score > best_score:
                best_k, best_score = k, score
        return best_k

    optimal_k = optimal_kmeans_clusters(X)
    st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {optimal_k}")

    # --- FAISS –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ---
    X = np.ascontiguousarray(X.astype('float32'))
    kmeans = faiss.Kmeans(d=X.shape[1], k=optimal_k, niter=25, verbose=False, gpu=False)
    kmeans.train(X)
    D, I = kmeans.index.search(X, 1)
    df["cluster"] = I.flatten()

    # --- –û–±—É—á–∞–µ–º Decision Tree ---
    tree = DecisionTreeClassifier(max_depth=4, random_state=42)
    tree.fit(X, I.flatten())

    # --- PCA –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X)
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=df["cluster"], palette="tab10", ax=ax)
    plt.title("FAISS –ö–ª–∞—Å—Ç–µ—Ä—ã (PCA –ø—Ä–æ–µ–∫—Ü–∏—è)")
    st.pyplot(fig)

    # --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º ---
    st.subheader("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö")
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.countplot(x="cluster", data=df, palette="Set2", ax=ax)
    st.pyplot(fig)

    # --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º ---
    if target_col:
        st.subheader("üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(x="cluster", y=target_col, data=df, palette="Set3", ax=ax)
        st.pyplot(fig)

    # --- –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º ---
    st.subheader("üìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    cluster_means = df.groupby("cluster")[df_num_col].mean()
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.heatmap(cluster_means, annot=True, cmap="YlGnBu", ax=ax)
    st.pyplot(fig)

    # --- –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π ---
    st.subheader("üå≥ –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)")
    feature_names = preprocessor.get_feature_names_out()
    fig, ax = plt.subplots(figsize=(22, 10))
    plot_tree(
        tree,
        filled=True,
        feature_names=feature_names,
        class_names=[f"Cluster {i}" for i in np.unique(I.flatten())],
        rounded=True,
        fontsize=8,
        ax=ax
    )
    st.pyplot(fig)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")